package services

import (
	"testing"
	"testing-app/mocks"
)

// using custom mock
/*
type MockMessageService struct {
	invocations map[string]int
}

func (mms *MockMessageService) Send(msg string) {
	mms.invocations["Send"]++
}

func (mms *MockMessageService) Called(methodName string) bool {
	if count, exists := mms.invocations[methodName]; exists {
		return count > 0
	}
	return false
}

func NewMockMessageService() *MockMessageService {
	return &MockMessageService{
		invocations: make(map[string]int),
	}
}

func Test_MessageProcessor(t *testing.T) {
	// Arrange
	mms := NewMockMessageService()
	sut := NewMessageProcessor(mms)

	// Act
	sut.Process("dummy message")

	// Assert
	if !mms.Called("Send") {
		t.Error("MessageService.Send() was not invoked")
	}
}
*/

// using mock generated by mockery

func Test_MessageProcessor(t *testing.T) {
	mockMessageService := &mocks.MessageService{}
	testMessage := "Dummy Message"

	mockMessageService.On("Send", testMessage).Return(true)
	sut := NewMessageProcessor(mockMessageService)

	sut.Process(testMessage)

	mockMessageService.AssertExpectations(t)
}
